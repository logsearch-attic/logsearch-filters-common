if [@type] == "syslog" and [syslog_message] =~ /^\- \- \[NXLOG/ {
    grok {
        match => [ "syslog_message", "\- \- \[NXLOG@%{POSINT:shipper[pid]} (?<shipper[source_params]>[^\]]+)\] %{GREEDYDATA:@message}" ]
        overwrite => [
            "@message"
        ]
        tag_on_failure => [ "_grokparsefailure-nxlog_standard" ]
    }

    if "_grokparsefailure-nxlog_standard" not in [tags] {
        # grok doesn't like @named groups
        mutate {
            rename => [ "shipper", "@shipper" ]
        }

        kv {
          source => "@shipper[source_params]"
          target => "@source"
        }

        mutate {
            # syslog is just the transport; no need to store
            remove_field => "syslog_message"
            remove_field => "syslog_pri"
            remove_field => "syslog5424_ver"
            remove_field => "syslog_program"
            remove_field => "syslog_severity_code"
            remove_field => "syslog_facility_code"
            remove_field => "syslog_facility"
            remove_field => "syslog_severity"

            # syslog host is actually the shipper
            rename => [ "@source.host", "@shipper[host]" ]

            # these arbitrary parameters are parsed to @source
            remove_field => "@shipper[source_params]"

            # these are parsed with kv, but they're static nxlog shipper properties
            rename => [ "@source[EventReceivedTime]", "@shipper[event_received_time" ]
            rename => [ "@source[SourceModuleName]", "@shipper[module_name" ]
            rename => [ "@source[SourceModuleType]", "@shipper[module_type" ]

            # @source[type] should replace the syslog @type
            rename => [ "@source[type]", "@type" ]
        }
    }
}
