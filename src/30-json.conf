if [@type] == "json" {
  json {
    source => "@message"
  }

  date {
    match => [ "timestamp", "ISO8601" ]
    timezone => "UTC"
  }
  

  #
  # typically message will be a string, so message_data is used as the object
  #

  ruby {
    code => "event['message_data'] = event.remove('message') if event.include?('message') and event['message'].is_a? Hash"
  }

  if [@timestamp] {
    #
    # We ran into a situation where a shipper was sending an improperly formatted
    # message into the logsearch cluster. It included a raw @timestamp field, but
    # it was an array. This causes the logstash parsing process to completely block
    # because it is unable to convert event['@timestamp'] since it expects a Time.
    #
    # This performs a check to ensure @timestamp is a Time, otherwise it renames
    # the field to _timestamperror, adds a _timestamperror tag, and replaces
    # @timestamp with the current time.
    #

    ruby {
      code => "if Time != event['@timestamp'].class ; event.tag('_timestamperror') ; event['_timestamperror'] = event['@timestamp'] ; event['@timestamp'] = Time.new ; end"
    }
  }
}
